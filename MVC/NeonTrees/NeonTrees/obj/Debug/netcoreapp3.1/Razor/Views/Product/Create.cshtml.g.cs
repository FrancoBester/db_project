#pragma checksum "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2b24fc279198c3516c9769c60fca4b160fa50b6e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Product_Create), @"mvc.1.0.view", @"/Views/Product/Create.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\_ViewImports.cshtml"
using NeonTrees;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\_ViewImports.cshtml"
using NeonTrees.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2b24fc279198c3516c9769c60fca4b160fa50b6e", @"/Views/Product/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a233dd4d465801631d196157b503be1fcdde2ed7", @"/Views/_ViewImports.cshtml")]
    public class Views_Product_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<NeonTrees.Models.Product>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("myform"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("myform"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Creater", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("background-color:  #adbec5"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\n");
#nullable restore
#line 3 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml"
   ViewData["Title"] = "Create"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<h1>Create</h1>\n\n<h4>Product</h4>\n<hr />\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2b24fc279198c3516c9769c60fca4b160fa50b6e5674", async() => {
                WriteLiteral(@"
            <!-- hiddenFrame: put this in target when/if you don't want json confirmation, A script can be written for an alert, but I pref this output for an assignment <iframe name=""hiddenFrame"" class=""hide""></iframe>-->
            <b>Name:</b> <input type=""text"" name=""name1"" id=""name1""><br>
            <script>
                document.getElementById('name').value = 'john';
            </script>
            <p style=""font-size: 2vh;"">NodeJS Express REST</p><br>
            <b>Name:</b> <input type=""text"" name=""name"" id=""name""><br>
            <b>Description:</b> <input type=""text"" name=""description"" id=""description""><br>
            <b>Inventory Value:</b> <input type=""text"" name=""InventoryValue"" id=""InventoryValue""><br> <!-- width does not load out of css with the initial call -->
            <b>Part Type:</b> <input id=""PartType"" type=""text"" name=""PartType""><br>
            <b>URL:</b> <input type=""text"" name=""url"" id=""url""><br>
            <div class=""form-group"">
                <input id=""saveIt"" ty");
                WriteLiteral("pe=\"submit\" value=\"Create\" class=\"btn btn-primary\" />\n            </div>\n            <button type=\"reset\" name=\"button\"><b>Reset</b></button><br>\n            <!-- Upload resume: <input type=\"file\" name=\"\" value=\"\" accept=\"pdf\"> -->\n        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"





        <ul id=""authors""></ul>
        <ul id=""fetchstuff""></ul>
        <button id=""clicker"" onclick=""PopulateScreen()"">Authors</button>

        <script>

            function PopulateScreen() {
                var str = """";


                populate('0', '1', '4 ', '5 ', '6 ');
                alert('time1');
                window.setTimeout(function() {}, 2000);

                populate('1', '1', '4 ', '5 ', '6 ');
                alert('time2');
                window.setTimeout(function() {}, 2000);
                populate('22', '1', '4 ', '5 ', '6 ');
                alert('time3');
            }

        </script>
        <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>
        <script type=""text/javascript"">

            const lName = document.getElementById('name');
            const lDescription = document.getElementById('description');
            const lInventoryValue = document.getElementById('InventoryValue');
            const lPartType = docum");
            WriteLiteral(@"ent.getElementById('PartType');
            const lurl = document.getElementById('url');
            const fetchStuff = document.getElementById('fetchStuff');


            var arrStuff = [];
            var obj = [];
            getFile();
            let bflag = false;

            var name = """";
            var description = """";
            var InventoryValue = """";
            var PartType = """";
            var url = """";

            var cout = 0;


            function populate(name, description, InventoryValue, Parttype, url) {
                try {
                    document.getElementById('name').value = name;
                    document.getElementById('description').value = description;
                    document.getElementById('InventoryValue').value = InventoryValue;
                    document.getElementById('PartType').value = Parttype;
                    document.getElementById('url').value = url;


                } catch (err) { alert(err.message) }
            }



            function ");
            WriteLiteral(@"Product(fname, des, val, parttypes, url) {
                this.name = fname;
                this.description = des;
                this.InventoryValue = val;
                this.PartType = parttypes;
                this.url = url;
            };

            function getFile() {
                populate('', '', '', '', '');
                const url = 'https://nameless-forest-23875.herokuapp.com/RawProduct/';
                fetch(url, {
                    method: 'GET', // *GET, POST, PUT, DELETE, etc.
                    mode: 'cors', // no-cors, *cors, same-origin
                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: 'same-origin', // include, *same-origin, omit
                    headers: {
                        'Content-Type': 'application/json'
                        // 'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    // redirect: 'follow', // manual, *follow, error
     ");
            WriteLiteral(@"               referrerPolicy: 'origin', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                })
                    .then((response) => {
                        return response.json()

                    })
                    .then((data) => {

                        for (var items of data) {
                            try {
                                
                                let item = JSON.stringify(items);
                                populate(item.name, item.description, item.InventoryValue, item.Parttype, item.url)
                                //$.post('/Product/Creater', { item });
                                window.setTimeout(function () { alert(item) }, 2000);

                            } catch (err) { alert(err.message); }
                        };
                        // Work with JSON data here
                        //console.log(JSON.stringify(data)");
            WriteLiteral(@");

                        //alert(JSON.stringify(data));
                        // parseDataStuff(data);

                    })
                    .catch((err) => {
                        // Do something for an error here
                        console.log(err.message);
                    });
            };


            function parseDataStuff(data) {



                // for (var items of data) {
                //     try {
                //         cout++;
                //         name = items.name;




                //items =JSON.stringify(items);
                //obj.push(items);
                //let id = await items._id.replace(/['""]+/g, '');
                //  if (items.Parttype == undefined || items.Parttype == null) {
                //      items.Parttype = ""Test PType"";
                //  }
                // alert(""desc: "" + items.description);
                // alert(""2: "" + items.InventoryValue);
                //  alert(""3: "" + items.Parttype);
                //  alert(""4:");
            WriteLiteral(@" "" + items.url);
                //  name = items.name;//.replace(/['""]+/g, '');
                // description = items.description;//.replace(/['""]+/g, '');
                // InventoryValue1 = items.InventoryValue;//.replace(/['""]+/g, '');
                //let InventoryValue2 = InventoryValue1.replace("","", ""."");
                //  PartType = items.PartType;//.replace(/['""]+/g, '');
                //url = items.url;//.replace(/['""]+/g, '');
                //    lName.value = name;//.replace(/['""]+/g, '');
                // let re = ""/^(Dr|Mr|Mrs|Ms|Er)\.[A-z]+$/"")
                //var myData = { Prop1: '', Prop2: '' }; // #1

                //$.post('/ProductController/Create', { arrStuff });
                //saveToOra(name, description, InventoryValue, Parttype, url);

                // let arrStuff = new Product(name, description, InventoryValue1, PartType, url);
                //saveToOra(arrStuff);
                //populate(items.name, items.description, items.InventoryValue, items.Parttype, i");
            WriteLiteral(@"tems.url);
                //    alert(cout + "" "" + name);

                //   } catch (err) { alert(""loop error: ""+e.message);}
                //
                //   };
                //console.log(id + name + description + + InventoryValue + PartType + url);
            };

            var x = 0;
            async function saveToOra(name, description, InventoryValue, Parttype, url) {//this is the one that does only 1
                try {
                    x++;

                    //for (items of data) { console.log(items);}

                    // for (var i in cout) { alert(""hello we are counting on: "" + cout); };
                    //for (var k = 0; k <= cout; k++) { if(arrStuff[k]!=null)fetchstuff.innerText += arrStuff[k].name; };


                    // lName.value = data.name;//.replace(/['""]+/g, '');
                    // lDescription = data.description;//.replace(/['""]+/g, '');
                    //  name = data.name;//.replace(/['""]+/g, '');

                    // document.getElementBy");
            WriteLiteral(@"Id('InventoryValue').value = data.InventoryValue;//.replace(/['""]+/g, '');
                    // lPartType.value = data.PartType;//.re    place(/['""]+/g, '');
                    // lurl.value = data.url;//.replace(/['""]+/g, '');

                    // fetchstuff.innerText += name;


                    // document.getElementById(""saveIt"").click();


                    //  populate(data.name, data.description, data.InventoryValue, ""Test"", data.url);
                    //populate(name, description, InventoryValue, Parttype, url);

                    alert(x + ""  "" + data.name + "" == "" + data.InventoryValue);


                    //arrStuff.push(new Product(name, description, InventoryValue, PartType, url));

                    // $.post('/Product/Create', { arrStuff });
                } catch (e) { alert(e) }
            };

            async function SENDIT() {
                //name = await data.name;//.replace(/['""]+/g, '');
                //description = await data.description;//.replace(/['""]+/g,");
            WriteLiteral(@" '');
                //InventoryValue = await data.InventoryValue;//.replace(/['""]+/g, '');
                //PartType = await data.PartType;//.replace(/['""]+/g, '');
                //url = await data.url;//.replace(/['""]+/g, '');
                //alert(""STOPPPPU!"");
                fetchstuff.innerText += name;
                lName.value = name;//.replace(/['""]+/g, '');
                lDescription.value = description;//.replace(/['""]+/g, '');
                document.getElementById('InventoryValue').value = InventoryValue;//.replace(/['""]+/g, '');
                lPartType.value = PartType;//.re    place(/['""]+/g, '');
                lurl.value = url;//.replace(/['""]+/g, '');
                // expected output: ""resolved""
                //
                //

                await document.getElementById(""saveIt"").click(); alert(""That's 1!"");
            }

            async function postStu(data = []) {
                console.log('calling');
                //console.log(JSON.stringify(data).replace");
            WriteLiteral(@"(/['""]+/g, ''));
                //document.getElementById(""PartType"").value = JSON.stringify(data.PartType);
                // console.log(JSON.stringify(data));
                //fetchstuff.innerHtml = html;

                //THESE GO TO THE CONTROLLER
                var namer = """";
                var descr = """";
                var vals = """";
                var ptype = """";
                var curl = """";

                var prevVal = """";


                let cleanData = await JSON.stringify(data).replace(/['""]+/g, '');
                // if (cleanData.includes("" "")) {
                //      cleanData = cleanData.replace("" "", ""%20"");
                //  }
                let cleanerData = await cleanData.replace(/({|})/g, """");
                alert('i am here ' + cleanerData);
                var splitter1 = await cleanerData.split("","");
                var someFlag = false;

                alert(""splitter second"" + splitter1[4]);
                /*for (var ite of splitter1) {


                    ");
            WriteLiteral(@"//lName.value = splitter1[ite];
                    if (ite.includes(""["")) {
                        ite = ite.replace(""["", """");
                    } else if (ite.includes(""]"")) {
                        ite = ite.replace(""]"", """");
                    } else if (ite.includes(""/http/g"")) {
                        ite = ite.slice(4);
                        curl = ite;
                        alert('look an url was sliced ' + curl);
                    } else if (!ite.includes(""/http/g"")) {
                        var splitter2 = ite.split("":"");
                    };



                    alert(""This is ite: "" + ite);
                    for (var items2 of splitter2) {
                        if (prevVal == 'name') {
                            namer = items2; alert(""here is a name!"" + namer);
                        } else if (prevVal == 'description') {
                            descr = items2;
                        } else if (prevVal == 'InventoryValue') {
                            vals = items2;
  ");
            WriteLiteral(@"                      } else if (prevVal == 'PartType') {
                            ptype = items2;
                        }
                        alert(""this item of splitter 2:"" + items2);
                        //alert(""this is 2nd item of splitter 2:"" + splitter1[2]);


                        if (items2 == 'name') { // this is quite redundant, i do know
                            prevVal = items2;
                        } else if (items2 == 'description') {
                            prevVal === items2;
                        } else if (items2 == 'InventoryValue') {
                            prevVal == items2;
                        } else if (items2 == 'PartType') {
                            prevVal = items2;
                        someFlag = true;
                        }//see we could use const var

                    };

                };
                //let cleanestData = a
                if (someFlag) { fetchstuff.innerHtml = namer; }

                bflag = true;
           ");
            WriteLiteral(@"     //$.post('/Product/Create', { arrStuff });





                for (var i = 0; i <= data.length; i++) {
                        lName.value = data[i].name;//.replace(/['""]+/g, '');
                    lDescription.value = data[i].description;//.replace(/['""]+/g, '');
                    document.getElementById('InventoryValue').value = data[i].InventoryValue;//.replace(/['""]+/g, '');
                    lPartType.value = data[i].PartType;//.re    place(/['""]+/g, '');
                    lurl.value = data[i].url;//.replace(/['""]+/g, '');
                        // expected output: ""resolved""
                        //

                   // document.getElementById(""saveIt"").click();



*/

            };

        </script>
    </div>
</div>

<div>
    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2b24fc279198c3516c9769c60fca4b160fa50b6e22302", async() => {
                WriteLiteral("Back to List");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</div>\n\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n");
#nullable restore
#line 361 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial"); 

#line default
#line hidden
#nullable disable
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<NeonTrees.Models.Product> Html { get; private set; }
    }
}
#pragma warning restore 1591
