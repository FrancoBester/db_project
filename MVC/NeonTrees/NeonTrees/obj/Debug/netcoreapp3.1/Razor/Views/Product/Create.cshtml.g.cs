#pragma checksum "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ef860d964f642215919cf8fadb0432ea3b3be8f3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Product_Create), @"mvc.1.0.view", @"/Views/Product/Create.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\_ViewImports.cshtml"
using NeonTrees;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\_ViewImports.cshtml"
using NeonTrees.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ef860d964f642215919cf8fadb0432ea3b3be8f3", @"/Views/Product/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a233dd4d465801631d196157b503be1fcdde2ed7", @"/Views/_ViewImports.cshtml")]
    public class Views_Product_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<NeonTrees.Models.Product>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Creater", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("background-color:  #adbec5"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("runat", new global::Microsoft.AspNetCore.Html.HtmlString("server"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\n");
#nullable restore
#line 3 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml"
   ViewData["Title"] = "Create"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<h1>Create</h1>\n\n<h4>Product</h4>\n<hr />\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ef860d964f642215919cf8fadb0432ea3b3be8f35332", async() => {
                WriteLiteral(@"
            <!-- hiddenFrame: put this in target when/if you don't want json confirmation, A script can be written for an alert, but I pref this output for an assignment <iframe name=""hiddenFrame"" class=""hide""></iframe>-->

            <p style=""font-size: 2vh;"">NodeJS Express REST</p><br>
            <b>Name:</b> <input type=""text"" name=""name"" id=""name"" runat=""server""><br>
            <b>Description:</b> <input type=""text"" name=""description"" id=""description""><br>
            <b>Inventory Value:</b> <input type=""text"" name=""InventoryValue"" id=""InventoryValue"" runat=""server""><br> <!-- width does not load out of css with the initial call -->
            <b>Part Type:</b> <input id=""PartType"" type=""text"" name=""PartType"" runat=""server""><br>
            <b>URL:</b> <input type=""text"" name=""url"" id=""url"" runat=""server""><br>
            <div class=""form-group"">
                <input id=""saveIt"" type=""submit"" value=""Create"" class=""btn btn-primary"" />
            </div>
            <button type=""reset"" name=""button""");
                WriteLiteral("><b>Reset</b></button><br>\n            <!-- Upload resume: <input type=\"file\" name=\"\" value=\"\" accept=\"pdf\"> -->\n        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"





        <ul id=""authors""></ul>
        <ul id=""fetchstuff""></ul>
        <button>Authors</button>

        <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""></script>
        <script type=""text/javascript"">

            const lName = document.getElementById('name');
            const lDescription = document.getElementById('description');
            const lInventoryValue = document.getElementById('InventoryValue');
            const lPartType = document.getElementById('PartType');
            const lurl = document.getElementById('url');

            var arrStuff = [];
            var obj = [];
            getFile();
            let bflag = false;

            var cout = 0;

            function Product(fname, des, val, parttypes, url) {
                this.name = fname;
                this.description = des;
                this.InventoryValue = val;
                this.PartType = parttypes;
                this.url = url;
            };
            async function getFile");
            WriteLiteral(@"() {

                const url = 'https://nameless-forest-23875.herokuapp.com/RawProduct/';
                await fetch(url, {
                    method: 'GET', // *GET, POST, PUT, DELETE, etc.
                    mode: 'cors', // no-cors, *cors, same-origin
                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: 'same-origin', // include, *same-origin, omit
                    headers: {
                        'Content-Type': 'application/json'
                        // 'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    // redirect: 'follow', // manual, *follow, error
                    referrerPolicy: 'origin', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                })
                    .then((response) => {
                        return response.json()
        ");
            WriteLiteral(@"            })
                    .then((data) => {
                        // Work with JSON data here
                        //console.log(JSON.stringify(data));
                        
                        //alert(JSON.stringify(data));
                        parseDataStuff(data);
                       
                    })
                    .catch((err) => {
                        // Do something for an error here
                        console.log(err.message);
                    });
            };

            

            async function parseDataStuff(data = []) {
                lName.value = data.name;//.replace(/['""]+/g, '');
                for (var items of data) {
                    //cout++;
                    //items =JSON.stringify(items);
                    obj.push(items);
                    //let id = await items._id.replace(/['""]+/g, '');

                    let name = await items.name;//.replace(/['""]+/g, '');
                    let description = await items.descript");
            WriteLiteral(@"ion;//.replace(/['""]+/g, '');
                    let InventoryValue1 = await items.InventoryValue;//.replace(/['""]+/g, '');
                    //let InventoryValue2 = InventoryValue1.replace("","", ""."");
                    let PartType = await items.PartType;//.replace(/['""]+/g, '');
                    let url = await items.url;//.replace(/['""]+/g, '');

                    // let re = ""/^(Dr|Mr|Mrs|Ms|Er)\.[A-z]+$/"")
                    //var myData = { Prop1: '', Prop2: '' }; // #1

                    //$.post('/ProductController/Create', { arrStuff });
                                   
                    arrStuff = new Product(name, description, InventoryValue1, PartType, url);
                    saveToOra(arrStuff);  
                    //$.post('/Product/Create', { arrStuff });
                }; alert('Done!');
                //console.log(id + name + description + + InventoryValue + PartType + url);
            };

            async function saveToOra(data = []) {//this is the one that does on");
            WriteLiteral(@"ly 1
                //for()
                //alert(""Running the save function"" + JSON.stringify(data) + ""------Test name"" + JSON.stringify(data.name));

                //alert(data.name);
                let name = await data.name;//.replace(/['""]+/g, '');
                let description = await data.description;//.replace(/['""]+/g, '');
                let InventoryValue = await data.InventoryValue;//.replace(/['""]+/g, '');
                let PartType = await data.PartType;//.replace(/['""]+/g, '');
                let url = await data.url;//.replace(/['""]+/g, '');
                //alert(""STOPPPPU!"");
                lName.value = name;//.replace(/['""]+/g, '');
                lDescription.value = description;//.replace(/['""]+/g, '');
                document.getElementById('InventoryValue').value = InventoryValue;//.replace(/['""]+/g, '');
                lPartType.value = PartType;//.re    place(/['""]+/g, '');
                lurl.value = url;//.replace(/['""]+/g, '');
                // expected outp");
            WriteLiteral(@"ut: ""resolved""
                // 
                SENDIT();
                //alert(""That's 1!"");

              



                //arrStuff.push(new Product(name, description, InventoryValue, PartType, url));
                console.log(arrStuff);  
               // $.post('/Product/Create', { arrStuff });
            }

            async function SENDIT(){
                await document.getElementById(""saveIt"").click();
            }

            async function postStu(data = []) {
                console.log('calling');
                //console.log(JSON.stringify(data).replace(/['""]+/g, ''));
                //document.getElementById(""PartType"").value = JSON.stringify(data.PartType);
               // console.log(JSON.stringify(data));
                //fetchstuff.innerHtml = html;

                //THESE GO TO THE CONTROLLER
                var namer ="""";
                var descr = """";
                var vals = """";
                var ptype = """";
                var curl = """";

        ");
            WriteLiteral(@"        var prevVal = """";


                let cleanData = await JSON.stringify(data).replace(/['""]+/g, '');
               // if (cleanData.includes("" "")) {
              //      cleanData = cleanData.replace("" "", ""%20"");
              //  }
                let cleanerData = await cleanData.replace(/({|})/g, """");  
                alert('i am here ' + cleanerData);
                var splitter1 = await cleanerData.split("","");
                var someFlag = false;
                
                alert(""splitter second"" + splitter1[4]);
                /*for (var ite of splitter1) {


                    //lName.value = splitter1[ite];
                    if (ite.includes(""["")) {
                        ite = ite.replace(""["", """");
                    } else if (ite.includes(""]"")) {
                        ite = ite.replace(""]"", """");
                    } else if (ite.includes(""/http/g"")) {
                        ite = ite.slice(4);
                        curl = ite;
                        alert('");
            WriteLiteral(@"look an url was sliced ' + curl);
                    } else if (!ite.includes(""/http/g"")) {
                        var splitter2 = ite.split("":"");
                    };

                        

                    alert(""This is ite: "" + ite);
                    for (var items2 of splitter2) {
                        if (prevVal == 'name') {
                            namer = items2; alert(""here is a name!"" + namer);
                        } else if (prevVal == 'description') {
                            descr = items2;
                        } else if (prevVal == 'InventoryValue') {
                            vals = items2;
                        } else if (prevVal == 'PartType') {
                            ptype = items2;
                        }
                        alert(""this item of splitter 2:"" + items2);
                        //alert(""this is 2nd item of splitter 2:"" + splitter1[2]);
                    

                        if (items2 == 'name') { // this");
            WriteLiteral(@" is quite redundant, i do know
                            prevVal = items2;
                        } else if (items2 == 'description') {
                            prevVal === items2;
                        } else if (items2 == 'InventoryValue') {
                            prevVal == items2;
                        } else if (items2 == 'PartType') {
                            prevVal = items2;
                        someFlag = true;
                        }//see we could use const var

                    };
                   
                };
                //let cleanestData = a
                if (someFlag) { fetchstuff.innerHtml = namer; }
                
                bflag = true;
                //$.post('/Product/Create', { arrStuff });
                



         
                for (var i = 0; i <= data.length; i++) {
                        lName.value = data[i].name;//.replace(/['""]+/g, '');
                    lDescription.value = data[i].description;//.replace(/");
            WriteLiteral(@"['""]+/g, '');
                    document.getElementById('InventoryValue').value = data[i].InventoryValue;//.replace(/['""]+/g, '');
                    lPartType.value = data[i].PartType;//.re    place(/['""]+/g, '');
                    lurl.value = data[i].url;//.replace(/['""]+/g, '');
                        // expected output: ""resolved""
                        // 

                   // document.getElementById(""saveIt"").click();
                    
              

*/

            };



        </script>
    </div>
</div>

<div>
    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ef860d964f642215919cf8fadb0432ea3b3be8f318327", async() => {
                WriteLiteral("Back to List");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</div>\n\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\n");
#nullable restore
#line 265 "C:\Coding\CMPG 321\db_project-NeonTrees-DB-with-Register-Login\db_project-NeonTrees-DB-with-Register-Login\MVC\NeonTrees\NeonTrees\Views\Product\Create.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial"); 

#line default
#line hidden
#nullable disable
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<NeonTrees.Models.Product> Html { get; private set; }
    }
}
#pragma warning restore 1591
